Terminals unused in grammar

   SEMICOLON
   DOT
   WHILE
   FOR
   SKIP
   IN
   TRUE
   FALSE
   BREAK
   SET
   ADDPERC
   SUBPERC
   ADDEQ
   SUBEQ
   DIVEQ
   MULTEQ
   DIVMEQ
   MAIN
   DIVIDE


Grammar

    0 $accept: prog $end

    1 prog: stmt_list

    2 stmt_list: stmt
    3          | stmt stmt_list
    4          | estr_cond

    5 stmt: assign end_stmt
    6     | definition end_stmt
    7     | decl_var end_stmt

    8 end_stmt: ENDLINE
    9         | CONTSTMT end_stmt

   10 assign: lhs ASSIGN rhs

   11 lhs: decl_var
   12    | var

   13 rhs: var
   14    | expr
   15    | call_func

   16 call_func: ID LPAREN RPAREN
   17          | ID LPAREN data_types RPAREN

   18 decl_var: decl_data_type ID

   19 decl_data_type: DECINT
   20               | DECREAL
   21               | DECSTR
   22               | ID

   23 var: ID

   24 data_type: prim_type
   25          | abs_type

   26 prim_type: INT
   27          | REAL
   28          | STR
   29          | DICT ASSIGN dict
   30          | LIST ASSIGN list
   31          | NIL

   32 abs_type: TYPE ID

   33 dict: LBRACK key_value RBRACK

   34 key_value: data_type COLON data_type
   35          | data_type COLON data_type COMMA key_value

   36 list: LBRACE data_types RBRACE

   37 data_types: data_type
   38           | data_type COMMA data_types

   39 definition: type_def
   40           | func_def

   41 decl_field_type: decl_var ENDLINE
   42                | decl_var ENDLINE decl_field_type

   43 type_def: TYPE ID COLON ENDLINE decl_field_type END

   44 func_def: DEF ID LPAREN data_types RPAREN COLON ENDLINE stmt_list END
   45         | DEF ID LPAREN data_types RPAREN COLON ENDLINE stmt_list RETURN data_type END

   46 expr: expr opbi1 term
   47     | term

   48 opbi1: PLUS
   49      | MINUS
   50      | LT
   51      | LE
   52      | GE
   53      | GT
   54      | EQ
   55      | AND
   56      | OR
   57      | DIVM
   58      | NEQ

   59 opbi2: DIV
   60      | TIMES

   61 term: term opbi2 fact
   62     | fact

   63 fact: LPAREN expr RPAREN
   64     | opuna data_type
   65     | data_type

   66 opuna: NOT
   67      | PERC
   68      | MINUS

   69 estr_cond: cond_ifelse

   70 cond_ifelse: IF expr COLON stmt_list END
   71            | IF expr COLON stmt_list END cond_else
   72            | IF expr COLON stmt_list END cond_elsif

   73 cond_else: ELSE COLON stmt_list END

   74 cond_elsif: ELIF expr COLON stmt_list END cond_elsif
   75           | ELIF expr COLON stmt_list END cond_else


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 26
REAL (259) 27
STR (260) 28
TYPE (261) 32 43
ID (262) 16 17 18 22 23 32 43 44 45
COMMA (263) 35 38
COLON (264) 34 35 43 44 45 70 71 72 73 74 75
SEMICOLON (265)
LPAREN (266) 16 17 44 45 63
RPAREN (267) 16 17 44 45 63
LBRACE (268) 36
RBRACE (269) 36
LBRACK (270) 33
RBRACK (271) 33
DOT (272)
PLUS (273) 48
MINUS (274) 49 68
TIMES (275) 60
DIV (276) 59
NEQ (277) 58
RETURN (278) 45
EQ (279) 54
LT (280) 50
LE (281) 51
GT (282) 53
GE (283) 52
AND (284) 55
OR (285) 56
ASSIGN (286) 10 29 30
ELIF (287) 74 75
IF (288) 70 71 72
ELSE (289) 73
WHILE (290)
FOR (291)
SKIP (292)
IN (293)
NOT (294) 66
NIL (295) 31
DEF (296) 44 45
TRUE (297)
FALSE (298)
BREAK (299)
SET (300)
LIST (301) 30
DIVM (302) 57
PERC (303) 67
ADDPERC (304)
SUBPERC (305)
ADDEQ (306)
SUBEQ (307)
DIVEQ (308)
MULTEQ (309)
DIVMEQ (310)
DICT (311) 29
MAIN (312)
END (313) 43 44 45 70 71 72 73 74 75
ENDLINE (314) 8 41 42 43 44 45
CONTSTMT (315) 9
DIVIDE (316)
DECINT (317) 19
DECREAL (318) 20
DECSTR (319) 21


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
prog (66)
    on left: 1, on right: 0
stmt_list (67)
    on left: 2 3 4, on right: 1 3 44 45 70 71 72 73 74 75
stmt (68)
    on left: 5 6 7, on right: 2 3
end_stmt (69)
    on left: 8 9, on right: 5 6 7 9
assign (70)
    on left: 10, on right: 5
lhs (71)
    on left: 11 12, on right: 10
rhs (72)
    on left: 13 14 15, on right: 10
call_func (73)
    on left: 16 17, on right: 15
decl_var (74)
    on left: 18, on right: 7 11 41 42
decl_data_type (75)
    on left: 19 20 21 22, on right: 18
var (76)
    on left: 23, on right: 12 13
data_type (77)
    on left: 24 25, on right: 34 35 37 38 45 64 65
prim_type (78)
    on left: 26 27 28 29 30 31, on right: 24
abs_type (79)
    on left: 32, on right: 25
dict (80)
    on left: 33, on right: 29
key_value (81)
    on left: 34 35, on right: 33 35
list (82)
    on left: 36, on right: 30
data_types (83)
    on left: 37 38, on right: 17 36 38 44 45
definition (84)
    on left: 39 40, on right: 6
decl_field_type (85)
    on left: 41 42, on right: 42 43
type_def (86)
    on left: 43, on right: 39
func_def (87)
    on left: 44 45, on right: 40
expr (88)
    on left: 46 47, on right: 14 46 63 70 71 72 74 75
opbi1 (89)
    on left: 48 49 50 51 52 53 54 55 56 57 58, on right: 46
opbi2 (90)
    on left: 59 60, on right: 61
term (91)
    on left: 61 62, on right: 46 47 61
fact (92)
    on left: 63 64 65, on right: 61 62
opuna (93)
    on left: 66 67 68, on right: 64
estr_cond (94)
    on left: 69, on right: 4
cond_ifelse (95)
    on left: 70 71 72, on right: 69
cond_else (96)
    on left: 73, on right: 71 75
cond_elsif (97)
    on left: 74 75, on right: 72 74


State 0

    0 $accept: . prog $end

    TYPE     shift, and go to state 1
    ID       shift, and go to state 2
    IF       shift, and go to state 3
    DEF      shift, and go to state 4
    DECINT   shift, and go to state 5
    DECREAL  shift, and go to state 6
    DECSTR   shift, and go to state 7

    prog            go to state 8
    stmt_list       go to state 9
    stmt            go to state 10
    assign          go to state 11
    lhs             go to state 12
    decl_var        go to state 13
    decl_data_type  go to state 14
    var             go to state 15
    definition      go to state 16
    type_def        go to state 17
    func_def        go to state 18
    estr_cond       go to state 19
    cond_ifelse     go to state 20


State 1

   43 type_def: TYPE . ID COLON ENDLINE decl_field_type END

    ID  shift, and go to state 21


State 2

   22 decl_data_type: ID .
   23 var: ID .

    ASSIGN    reduce using rule 23 (var)
    $default  reduce using rule 22 (decl_data_type)


State 3

   70 cond_ifelse: IF . expr COLON stmt_list END
   71            | IF . expr COLON stmt_list END cond_else
   72            | IF . expr COLON stmt_list END cond_elsif

    INT     shift, and go to state 22
    REAL    shift, and go to state 23
    STR     shift, and go to state 24
    TYPE    shift, and go to state 25
    LPAREN  shift, and go to state 26
    MINUS   shift, and go to state 27
    NOT     shift, and go to state 28
    NIL     shift, and go to state 29
    LIST    shift, and go to state 30
    PERC    shift, and go to state 31
    DICT    shift, and go to state 32

    data_type  go to state 33
    prim_type  go to state 34
    abs_type   go to state 35
    expr       go to state 36
    term       go to state 37
    fact       go to state 38
    opuna      go to state 39


State 4

   44 func_def: DEF . ID LPAREN data_types RPAREN COLON ENDLINE stmt_list END
   45         | DEF . ID LPAREN data_types RPAREN COLON ENDLINE stmt_list RETURN data_type END

    ID  shift, and go to state 40


State 5

   19 decl_data_type: DECINT .

    $default  reduce using rule 19 (decl_data_type)


State 6

   20 decl_data_type: DECREAL .

    $default  reduce using rule 20 (decl_data_type)


State 7

   21 decl_data_type: DECSTR .

    $default  reduce using rule 21 (decl_data_type)


State 8

    0 $accept: prog . $end

    $end  shift, and go to state 41


State 9

    1 prog: stmt_list .

    $default  reduce using rule 1 (prog)


State 10

    2 stmt_list: stmt .
    3          | stmt . stmt_list

    TYPE     shift, and go to state 1
    ID       shift, and go to state 2
    IF       shift, and go to state 3
    DEF      shift, and go to state 4
    DECINT   shift, and go to state 5
    DECREAL  shift, and go to state 6
    DECSTR   shift, and go to state 7

    $default  reduce using rule 2 (stmt_list)

    stmt_list       go to state 42
    stmt            go to state 10
    assign          go to state 11
    lhs             go to state 12
    decl_var        go to state 13
    decl_data_type  go to state 14
    var             go to state 15
    definition      go to state 16
    type_def        go to state 17
    func_def        go to state 18
    estr_cond       go to state 19
    cond_ifelse     go to state 20


State 11

    5 stmt: assign . end_stmt

    ENDLINE   shift, and go to state 43
    CONTSTMT  shift, and go to state 44

    end_stmt  go to state 45


State 12

   10 assign: lhs . ASSIGN rhs

    ASSIGN  shift, and go to state 46


State 13

    7 stmt: decl_var . end_stmt
   11 lhs: decl_var .

    ENDLINE   shift, and go to state 43
    CONTSTMT  shift, and go to state 44

    $default  reduce using rule 11 (lhs)

    end_stmt  go to state 47


State 14

   18 decl_var: decl_data_type . ID

    ID  shift, and go to state 48


State 15

   12 lhs: var .

    $default  reduce using rule 12 (lhs)


State 16

    6 stmt: definition . end_stmt

    ENDLINE   shift, and go to state 43
    CONTSTMT  shift, and go to state 44

    end_stmt  go to state 49


State 17

   39 definition: type_def .

    $default  reduce using rule 39 (definition)


State 18

   40 definition: func_def .

    $default  reduce using rule 40 (definition)


State 19

    4 stmt_list: estr_cond .

    $default  reduce using rule 4 (stmt_list)


State 20

   69 estr_cond: cond_ifelse .

    $default  reduce using rule 69 (estr_cond)


State 21

   43 type_def: TYPE ID . COLON ENDLINE decl_field_type END

    COLON  shift, and go to state 50


State 22

   26 prim_type: INT .

    $default  reduce using rule 26 (prim_type)


State 23

   27 prim_type: REAL .

    $default  reduce using rule 27 (prim_type)


State 24

   28 prim_type: STR .

    $default  reduce using rule 28 (prim_type)


State 25

   32 abs_type: TYPE . ID

    ID  shift, and go to state 51


State 26

   63 fact: LPAREN . expr RPAREN

    INT     shift, and go to state 22
    REAL    shift, and go to state 23
    STR     shift, and go to state 24
    TYPE    shift, and go to state 25
    LPAREN  shift, and go to state 26
    MINUS   shift, and go to state 27
    NOT     shift, and go to state 28
    NIL     shift, and go to state 29
    LIST    shift, and go to state 30
    PERC    shift, and go to state 31
    DICT    shift, and go to state 32

    data_type  go to state 33
    prim_type  go to state 34
    abs_type   go to state 35
    expr       go to state 52
    term       go to state 37
    fact       go to state 38
    opuna      go to state 39


State 27

   68 opuna: MINUS .

    $default  reduce using rule 68 (opuna)


State 28

   66 opuna: NOT .

    $default  reduce using rule 66 (opuna)


State 29

   31 prim_type: NIL .

    $default  reduce using rule 31 (prim_type)


State 30

   30 prim_type: LIST . ASSIGN list

    ASSIGN  shift, and go to state 53


State 31

   67 opuna: PERC .

    $default  reduce using rule 67 (opuna)


State 32

   29 prim_type: DICT . ASSIGN dict

    ASSIGN  shift, and go to state 54


State 33

   65 fact: data_type .

    $default  reduce using rule 65 (fact)


State 34

   24 data_type: prim_type .

    $default  reduce using rule 24 (data_type)


State 35

   25 data_type: abs_type .

    $default  reduce using rule 25 (data_type)


State 36

   46 expr: expr . opbi1 term
   70 cond_ifelse: IF expr . COLON stmt_list END
   71            | IF expr . COLON stmt_list END cond_else
   72            | IF expr . COLON stmt_list END cond_elsif

    COLON  shift, and go to state 55
    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    NEQ    shift, and go to state 58
    EQ     shift, and go to state 59
    LT     shift, and go to state 60
    LE     shift, and go to state 61
    GT     shift, and go to state 62
    GE     shift, and go to state 63
    AND    shift, and go to state 64
    OR     shift, and go to state 65
    DIVM   shift, and go to state 66

    opbi1  go to state 67


State 37

   47 expr: term .
   61 term: term . opbi2 fact

    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 47 (expr)

    opbi2  go to state 70


State 38

   62 term: fact .

    $default  reduce using rule 62 (term)


State 39

   64 fact: opuna . data_type

    INT   shift, and go to state 22
    REAL  shift, and go to state 23
    STR   shift, and go to state 24
    TYPE  shift, and go to state 25
    NIL   shift, and go to state 29
    LIST  shift, and go to state 30
    DICT  shift, and go to state 32

    data_type  go to state 71
    prim_type  go to state 34
    abs_type   go to state 35


State 40

   44 func_def: DEF ID . LPAREN data_types RPAREN COLON ENDLINE stmt_list END
   45         | DEF ID . LPAREN data_types RPAREN COLON ENDLINE stmt_list RETURN data_type END

    LPAREN  shift, and go to state 72


State 41

    0 $accept: prog $end .

    $default  accept


State 42

    3 stmt_list: stmt stmt_list .

    $default  reduce using rule 3 (stmt_list)


State 43

    8 end_stmt: ENDLINE .

    $default  reduce using rule 8 (end_stmt)


State 44

    9 end_stmt: CONTSTMT . end_stmt

    ENDLINE   shift, and go to state 43
    CONTSTMT  shift, and go to state 44

    end_stmt  go to state 73


State 45

    5 stmt: assign end_stmt .

    $default  reduce using rule 5 (stmt)


State 46

   10 assign: lhs ASSIGN . rhs

    INT     shift, and go to state 22
    REAL    shift, and go to state 23
    STR     shift, and go to state 24
    TYPE    shift, and go to state 25
    ID      shift, and go to state 74
    LPAREN  shift, and go to state 26
    MINUS   shift, and go to state 27
    NOT     shift, and go to state 28
    NIL     shift, and go to state 29
    LIST    shift, and go to state 30
    PERC    shift, and go to state 31
    DICT    shift, and go to state 32

    rhs        go to state 75
    call_func  go to state 76
    var        go to state 77
    data_type  go to state 33
    prim_type  go to state 34
    abs_type   go to state 35
    expr       go to state 78
    term       go to state 37
    fact       go to state 38
    opuna      go to state 39


State 47

    7 stmt: decl_var end_stmt .

    $default  reduce using rule 7 (stmt)


State 48

   18 decl_var: decl_data_type ID .

    $default  reduce using rule 18 (decl_var)


State 49

    6 stmt: definition end_stmt .

    $default  reduce using rule 6 (stmt)


State 50

   43 type_def: TYPE ID COLON . ENDLINE decl_field_type END

    ENDLINE  shift, and go to state 79


State 51

   32 abs_type: TYPE ID .

    $default  reduce using rule 32 (abs_type)


State 52

   46 expr: expr . opbi1 term
   63 fact: LPAREN expr . RPAREN

    RPAREN  shift, and go to state 80
    PLUS    shift, and go to state 56
    MINUS   shift, and go to state 57
    NEQ     shift, and go to state 58
    EQ      shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    AND     shift, and go to state 64
    OR      shift, and go to state 65
    DIVM    shift, and go to state 66

    opbi1  go to state 67


State 53

   30 prim_type: LIST ASSIGN . list

    LBRACE  shift, and go to state 81

    list  go to state 82


State 54

   29 prim_type: DICT ASSIGN . dict

    LBRACK  shift, and go to state 83

    dict  go to state 84


State 55

   70 cond_ifelse: IF expr COLON . stmt_list END
   71            | IF expr COLON . stmt_list END cond_else
   72            | IF expr COLON . stmt_list END cond_elsif

    TYPE     shift, and go to state 1
    ID       shift, and go to state 2
    IF       shift, and go to state 3
    DEF      shift, and go to state 4
    DECINT   shift, and go to state 5
    DECREAL  shift, and go to state 6
    DECSTR   shift, and go to state 7

    stmt_list       go to state 85
    stmt            go to state 10
    assign          go to state 11
    lhs             go to state 12
    decl_var        go to state 13
    decl_data_type  go to state 14
    var             go to state 15
    definition      go to state 16
    type_def        go to state 17
    func_def        go to state 18
    estr_cond       go to state 19
    cond_ifelse     go to state 20


State 56

   48 opbi1: PLUS .

    $default  reduce using rule 48 (opbi1)


State 57

   49 opbi1: MINUS .

    $default  reduce using rule 49 (opbi1)


State 58

   58 opbi1: NEQ .

    $default  reduce using rule 58 (opbi1)


State 59

   54 opbi1: EQ .

    $default  reduce using rule 54 (opbi1)


State 60

   50 opbi1: LT .

    $default  reduce using rule 50 (opbi1)


State 61

   51 opbi1: LE .

    $default  reduce using rule 51 (opbi1)


State 62

   53 opbi1: GT .

    $default  reduce using rule 53 (opbi1)


State 63

   52 opbi1: GE .

    $default  reduce using rule 52 (opbi1)


State 64

   55 opbi1: AND .

    $default  reduce using rule 55 (opbi1)


State 65

   56 opbi1: OR .

    $default  reduce using rule 56 (opbi1)


State 66

   57 opbi1: DIVM .

    $default  reduce using rule 57 (opbi1)


State 67

   46 expr: expr opbi1 . term

    INT     shift, and go to state 22
    REAL    shift, and go to state 23
    STR     shift, and go to state 24
    TYPE    shift, and go to state 25
    LPAREN  shift, and go to state 26
    MINUS   shift, and go to state 27
    NOT     shift, and go to state 28
    NIL     shift, and go to state 29
    LIST    shift, and go to state 30
    PERC    shift, and go to state 31
    DICT    shift, and go to state 32

    data_type  go to state 33
    prim_type  go to state 34
    abs_type   go to state 35
    term       go to state 86
    fact       go to state 38
    opuna      go to state 39


State 68

   60 opbi2: TIMES .

    $default  reduce using rule 60 (opbi2)


State 69

   59 opbi2: DIV .

    $default  reduce using rule 59 (opbi2)


State 70

   61 term: term opbi2 . fact

    INT     shift, and go to state 22
    REAL    shift, and go to state 23
    STR     shift, and go to state 24
    TYPE    shift, and go to state 25
    LPAREN  shift, and go to state 26
    MINUS   shift, and go to state 27
    NOT     shift, and go to state 28
    NIL     shift, and go to state 29
    LIST    shift, and go to state 30
    PERC    shift, and go to state 31
    DICT    shift, and go to state 32

    data_type  go to state 33
    prim_type  go to state 34
    abs_type   go to state 35
    fact       go to state 87
    opuna      go to state 39


State 71

   64 fact: opuna data_type .

    $default  reduce using rule 64 (fact)


State 72

   44 func_def: DEF ID LPAREN . data_types RPAREN COLON ENDLINE stmt_list END
   45         | DEF ID LPAREN . data_types RPAREN COLON ENDLINE stmt_list RETURN data_type END

    INT   shift, and go to state 22
    REAL  shift, and go to state 23
    STR   shift, and go to state 24
    TYPE  shift, and go to state 25
    NIL   shift, and go to state 29
    LIST  shift, and go to state 30
    DICT  shift, and go to state 32

    data_type   go to state 88
    prim_type   go to state 34
    abs_type    go to state 35
    data_types  go to state 89


State 73

    9 end_stmt: CONTSTMT end_stmt .

    $default  reduce using rule 9 (end_stmt)


State 74

   16 call_func: ID . LPAREN RPAREN
   17          | ID . LPAREN data_types RPAREN
   23 var: ID .

    LPAREN  shift, and go to state 90

    $default  reduce using rule 23 (var)


State 75

   10 assign: lhs ASSIGN rhs .

    $default  reduce using rule 10 (assign)


State 76

   15 rhs: call_func .

    $default  reduce using rule 15 (rhs)


State 77

   13 rhs: var .

    $default  reduce using rule 13 (rhs)


State 78

   14 rhs: expr .
   46 expr: expr . opbi1 term

    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    NEQ    shift, and go to state 58
    EQ     shift, and go to state 59
    LT     shift, and go to state 60
    LE     shift, and go to state 61
    GT     shift, and go to state 62
    GE     shift, and go to state 63
    AND    shift, and go to state 64
    OR     shift, and go to state 65
    DIVM   shift, and go to state 66

    $default  reduce using rule 14 (rhs)

    opbi1  go to state 67


State 79

   43 type_def: TYPE ID COLON ENDLINE . decl_field_type END

    ID       shift, and go to state 91
    DECINT   shift, and go to state 5
    DECREAL  shift, and go to state 6
    DECSTR   shift, and go to state 7

    decl_var         go to state 92
    decl_data_type   go to state 14
    decl_field_type  go to state 93


State 80

   63 fact: LPAREN expr RPAREN .

    $default  reduce using rule 63 (fact)


State 81

   36 list: LBRACE . data_types RBRACE

    INT   shift, and go to state 22
    REAL  shift, and go to state 23
    STR   shift, and go to state 24
    TYPE  shift, and go to state 25
    NIL   shift, and go to state 29
    LIST  shift, and go to state 30
    DICT  shift, and go to state 32

    data_type   go to state 88
    prim_type   go to state 34
    abs_type    go to state 35
    data_types  go to state 94


State 82

   30 prim_type: LIST ASSIGN list .

    $default  reduce using rule 30 (prim_type)


State 83

   33 dict: LBRACK . key_value RBRACK

    INT   shift, and go to state 22
    REAL  shift, and go to state 23
    STR   shift, and go to state 24
    TYPE  shift, and go to state 25
    NIL   shift, and go to state 29
    LIST  shift, and go to state 30
    DICT  shift, and go to state 32

    data_type  go to state 95
    prim_type  go to state 34
    abs_type   go to state 35
    key_value  go to state 96


State 84

   29 prim_type: DICT ASSIGN dict .

    $default  reduce using rule 29 (prim_type)


State 85

   70 cond_ifelse: IF expr COLON stmt_list . END
   71            | IF expr COLON stmt_list . END cond_else
   72            | IF expr COLON stmt_list . END cond_elsif

    END  shift, and go to state 97


State 86

   46 expr: expr opbi1 term .
   61 term: term . opbi2 fact

    TIMES  shift, and go to state 68
    DIV    shift, and go to state 69

    $default  reduce using rule 46 (expr)

    opbi2  go to state 70


State 87

   61 term: term opbi2 fact .

    $default  reduce using rule 61 (term)


State 88

   37 data_types: data_type .
   38           | data_type . COMMA data_types

    COMMA  shift, and go to state 98

    $default  reduce using rule 37 (data_types)


State 89

   44 func_def: DEF ID LPAREN data_types . RPAREN COLON ENDLINE stmt_list END
   45         | DEF ID LPAREN data_types . RPAREN COLON ENDLINE stmt_list RETURN data_type END

    RPAREN  shift, and go to state 99


State 90

   16 call_func: ID LPAREN . RPAREN
   17          | ID LPAREN . data_types RPAREN

    INT     shift, and go to state 22
    REAL    shift, and go to state 23
    STR     shift, and go to state 24
    TYPE    shift, and go to state 25
    RPAREN  shift, and go to state 100
    NIL     shift, and go to state 29
    LIST    shift, and go to state 30
    DICT    shift, and go to state 32

    data_type   go to state 88
    prim_type   go to state 34
    abs_type    go to state 35
    data_types  go to state 101


State 91

   22 decl_data_type: ID .

    $default  reduce using rule 22 (decl_data_type)


State 92

   41 decl_field_type: decl_var . ENDLINE
   42                | decl_var . ENDLINE decl_field_type

    ENDLINE  shift, and go to state 102


State 93

   43 type_def: TYPE ID COLON ENDLINE decl_field_type . END

    END  shift, and go to state 103


State 94

   36 list: LBRACE data_types . RBRACE

    RBRACE  shift, and go to state 104


State 95

   34 key_value: data_type . COLON data_type
   35          | data_type . COLON data_type COMMA key_value

    COLON  shift, and go to state 105


State 96

   33 dict: LBRACK key_value . RBRACK

    RBRACK  shift, and go to state 106


State 97

   70 cond_ifelse: IF expr COLON stmt_list END .
   71            | IF expr COLON stmt_list END . cond_else
   72            | IF expr COLON stmt_list END . cond_elsif

    ELIF  shift, and go to state 107
    ELSE  shift, and go to state 108

    $default  reduce using rule 70 (cond_ifelse)

    cond_else   go to state 109
    cond_elsif  go to state 110


State 98

   38 data_types: data_type COMMA . data_types

    INT   shift, and go to state 22
    REAL  shift, and go to state 23
    STR   shift, and go to state 24
    TYPE  shift, and go to state 25
    NIL   shift, and go to state 29
    LIST  shift, and go to state 30
    DICT  shift, and go to state 32

    data_type   go to state 88
    prim_type   go to state 34
    abs_type    go to state 35
    data_types  go to state 111


State 99

   44 func_def: DEF ID LPAREN data_types RPAREN . COLON ENDLINE stmt_list END
   45         | DEF ID LPAREN data_types RPAREN . COLON ENDLINE stmt_list RETURN data_type END

    COLON  shift, and go to state 112


State 100

   16 call_func: ID LPAREN RPAREN .

    $default  reduce using rule 16 (call_func)


State 101

   17 call_func: ID LPAREN data_types . RPAREN

    RPAREN  shift, and go to state 113


State 102

   41 decl_field_type: decl_var ENDLINE .
   42                | decl_var ENDLINE . decl_field_type

    ID       shift, and go to state 91
    DECINT   shift, and go to state 5
    DECREAL  shift, and go to state 6
    DECSTR   shift, and go to state 7

    $default  reduce using rule 41 (decl_field_type)

    decl_var         go to state 92
    decl_data_type   go to state 14
    decl_field_type  go to state 114


State 103

   43 type_def: TYPE ID COLON ENDLINE decl_field_type END .

    $default  reduce using rule 43 (type_def)


State 104

   36 list: LBRACE data_types RBRACE .

    $default  reduce using rule 36 (list)


State 105

   34 key_value: data_type COLON . data_type
   35          | data_type COLON . data_type COMMA key_value

    INT   shift, and go to state 22
    REAL  shift, and go to state 23
    STR   shift, and go to state 24
    TYPE  shift, and go to state 25
    NIL   shift, and go to state 29
    LIST  shift, and go to state 30
    DICT  shift, and go to state 32

    data_type  go to state 115
    prim_type  go to state 34
    abs_type   go to state 35


State 106

   33 dict: LBRACK key_value RBRACK .

    $default  reduce using rule 33 (dict)


State 107

   74 cond_elsif: ELIF . expr COLON stmt_list END cond_elsif
   75           | ELIF . expr COLON stmt_list END cond_else

    INT     shift, and go to state 22
    REAL    shift, and go to state 23
    STR     shift, and go to state 24
    TYPE    shift, and go to state 25
    LPAREN  shift, and go to state 26
    MINUS   shift, and go to state 27
    NOT     shift, and go to state 28
    NIL     shift, and go to state 29
    LIST    shift, and go to state 30
    PERC    shift, and go to state 31
    DICT    shift, and go to state 32

    data_type  go to state 33
    prim_type  go to state 34
    abs_type   go to state 35
    expr       go to state 116
    term       go to state 37
    fact       go to state 38
    opuna      go to state 39


State 108

   73 cond_else: ELSE . COLON stmt_list END

    COLON  shift, and go to state 117


State 109

   71 cond_ifelse: IF expr COLON stmt_list END cond_else .

    $default  reduce using rule 71 (cond_ifelse)


State 110

   72 cond_ifelse: IF expr COLON stmt_list END cond_elsif .

    $default  reduce using rule 72 (cond_ifelse)


State 111

   38 data_types: data_type COMMA data_types .

    $default  reduce using rule 38 (data_types)


State 112

   44 func_def: DEF ID LPAREN data_types RPAREN COLON . ENDLINE stmt_list END
   45         | DEF ID LPAREN data_types RPAREN COLON . ENDLINE stmt_list RETURN data_type END

    ENDLINE  shift, and go to state 118


State 113

   17 call_func: ID LPAREN data_types RPAREN .

    $default  reduce using rule 17 (call_func)


State 114

   42 decl_field_type: decl_var ENDLINE decl_field_type .

    $default  reduce using rule 42 (decl_field_type)


State 115

   34 key_value: data_type COLON data_type .
   35          | data_type COLON data_type . COMMA key_value

    COMMA  shift, and go to state 119

    $default  reduce using rule 34 (key_value)


State 116

   46 expr: expr . opbi1 term
   74 cond_elsif: ELIF expr . COLON stmt_list END cond_elsif
   75           | ELIF expr . COLON stmt_list END cond_else

    COLON  shift, and go to state 120
    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    NEQ    shift, and go to state 58
    EQ     shift, and go to state 59
    LT     shift, and go to state 60
    LE     shift, and go to state 61
    GT     shift, and go to state 62
    GE     shift, and go to state 63
    AND    shift, and go to state 64
    OR     shift, and go to state 65
    DIVM   shift, and go to state 66

    opbi1  go to state 67


State 117

   73 cond_else: ELSE COLON . stmt_list END

    TYPE     shift, and go to state 1
    ID       shift, and go to state 2
    IF       shift, and go to state 3
    DEF      shift, and go to state 4
    DECINT   shift, and go to state 5
    DECREAL  shift, and go to state 6
    DECSTR   shift, and go to state 7

    stmt_list       go to state 121
    stmt            go to state 10
    assign          go to state 11
    lhs             go to state 12
    decl_var        go to state 13
    decl_data_type  go to state 14
    var             go to state 15
    definition      go to state 16
    type_def        go to state 17
    func_def        go to state 18
    estr_cond       go to state 19
    cond_ifelse     go to state 20


State 118

   44 func_def: DEF ID LPAREN data_types RPAREN COLON ENDLINE . stmt_list END
   45         | DEF ID LPAREN data_types RPAREN COLON ENDLINE . stmt_list RETURN data_type END

    TYPE     shift, and go to state 1
    ID       shift, and go to state 2
    IF       shift, and go to state 3
    DEF      shift, and go to state 4
    DECINT   shift, and go to state 5
    DECREAL  shift, and go to state 6
    DECSTR   shift, and go to state 7

    stmt_list       go to state 122
    stmt            go to state 10
    assign          go to state 11
    lhs             go to state 12
    decl_var        go to state 13
    decl_data_type  go to state 14
    var             go to state 15
    definition      go to state 16
    type_def        go to state 17
    func_def        go to state 18
    estr_cond       go to state 19
    cond_ifelse     go to state 20


State 119

   35 key_value: data_type COLON data_type COMMA . key_value

    INT   shift, and go to state 22
    REAL  shift, and go to state 23
    STR   shift, and go to state 24
    TYPE  shift, and go to state 25
    NIL   shift, and go to state 29
    LIST  shift, and go to state 30
    DICT  shift, and go to state 32

    data_type  go to state 95
    prim_type  go to state 34
    abs_type   go to state 35
    key_value  go to state 123


State 120

   74 cond_elsif: ELIF expr COLON . stmt_list END cond_elsif
   75           | ELIF expr COLON . stmt_list END cond_else

    TYPE     shift, and go to state 1
    ID       shift, and go to state 2
    IF       shift, and go to state 3
    DEF      shift, and go to state 4
    DECINT   shift, and go to state 5
    DECREAL  shift, and go to state 6
    DECSTR   shift, and go to state 7

    stmt_list       go to state 124
    stmt            go to state 10
    assign          go to state 11
    lhs             go to state 12
    decl_var        go to state 13
    decl_data_type  go to state 14
    var             go to state 15
    definition      go to state 16
    type_def        go to state 17
    func_def        go to state 18
    estr_cond       go to state 19
    cond_ifelse     go to state 20


State 121

   73 cond_else: ELSE COLON stmt_list . END

    END  shift, and go to state 125


State 122

   44 func_def: DEF ID LPAREN data_types RPAREN COLON ENDLINE stmt_list . END
   45         | DEF ID LPAREN data_types RPAREN COLON ENDLINE stmt_list . RETURN data_type END

    RETURN  shift, and go to state 126
    END     shift, and go to state 127


State 123

   35 key_value: data_type COLON data_type COMMA key_value .

    $default  reduce using rule 35 (key_value)


State 124

   74 cond_elsif: ELIF expr COLON stmt_list . END cond_elsif
   75           | ELIF expr COLON stmt_list . END cond_else

    END  shift, and go to state 128


State 125

   73 cond_else: ELSE COLON stmt_list END .

    $default  reduce using rule 73 (cond_else)


State 126

   45 func_def: DEF ID LPAREN data_types RPAREN COLON ENDLINE stmt_list RETURN . data_type END

    INT   shift, and go to state 22
    REAL  shift, and go to state 23
    STR   shift, and go to state 24
    TYPE  shift, and go to state 25
    NIL   shift, and go to state 29
    LIST  shift, and go to state 30
    DICT  shift, and go to state 32

    data_type  go to state 129
    prim_type  go to state 34
    abs_type   go to state 35


State 127

   44 func_def: DEF ID LPAREN data_types RPAREN COLON ENDLINE stmt_list END .

    $default  reduce using rule 44 (func_def)


State 128

   74 cond_elsif: ELIF expr COLON stmt_list END . cond_elsif
   75           | ELIF expr COLON stmt_list END . cond_else

    ELIF  shift, and go to state 107
    ELSE  shift, and go to state 108

    cond_else   go to state 130
    cond_elsif  go to state 131


State 129

   45 func_def: DEF ID LPAREN data_types RPAREN COLON ENDLINE stmt_list RETURN data_type . END

    END  shift, and go to state 132


State 130

   75 cond_elsif: ELIF expr COLON stmt_list END cond_else .

    $default  reduce using rule 75 (cond_elsif)


State 131

   74 cond_elsif: ELIF expr COLON stmt_list END cond_elsif .

    $default  reduce using rule 74 (cond_elsif)


State 132

   45 func_def: DEF ID LPAREN data_types RPAREN COLON ENDLINE stmt_list RETURN data_type END .

    $default  reduce using rule 45 (func_def)
