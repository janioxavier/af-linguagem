Terminals unused in grammar

   SEMICOLON
   LBRACE
   RBRACE
   LBRACK
   RBRACK
   DOT
   SKIP
   TRUE
   FALSE
   BREAK
   SET
   LIST
   DIVM
   ADDPERC
   SUBPERC
   ADDEQ
   SUBEQ
   DIVEQ
   MULTEQ
   DIVMEQ
   DICT
   MAIN
   CONTSTMT
   DIV
   PERC
   '-'


Grammar

    0 $accept: prog $end

    1 prog: stmt_list

    2 stmt_list: stmt
    3          | stmt stmt_list

    4 stmt: assign end_stmt
    5     | definition end_stmt
    6     | decl_var end_stmt
    7     | estr_cond end_stmt
    8     | f_builtin end_stmt
    9     | expr end_stmt
   10     | estr_while end_stmt
   11     | estr_for end_stmt

   12 end_stmt: ENDLINE

   13 assign: lhs ASSIGN rhs

   14 lhs: decl_var
   15    | var

   16 rhs: expr

   17 call_func: ID LPAREN RPAREN
   18          | ID LPAREN data_types RPAREN

   19 decl_var: decl_data_type ID

   20 decl_data_type: DECINT
   21               | DECREAL
   22               | DECSTR
   23               | ID

   24 var: ID

   25 data_type: prim_type
   26          | abs_type

   27 prim_type: INT
   28          | REAL
   29          | STR
   30          | NIL

   31 abs_type: ID

   32 data_types: data_type
   33           | data_type COMMA data_types

   34 definition: type_def
   35           | func_def

   36 decl_field_type: decl_var ENDLINE
   37                | decl_var ENDLINE decl_field_type

   38 type_def: TYPE ID COLON ENDLINE decl_field_type END

   39 param_func: decl_var
   40           | decl_var COMMA param_func

   41 func_def: %empty
   42         | DEF ID LPAREN RPAREN COLON ENDLINE stmt_list END
   43         | DEF ID LPAREN RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   44         | DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   45         | DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list END

   46 expr: LPAREN expr RPAREN
   47     | expr PLUS expr
   48     | expr MINUS expr
   49     | expr TIMES expr
   50     | expr DIVIDE expr
   51     | expr LT expr
   52     | expr LE expr
   53     | expr GE expr
   54     | expr GT expr
   55     | expr EQ expr
   56     | expr AND expr
   57     | expr OR expr
   58     | expr NEQ expr
   59     | NOT expr
   60     | MINUS expr
   61     | REAL
   62     | INT
   63     | call_func

   64 f_builtin: f_print
   65          | f_input

   66 f_print: PRINT expr

   67 f_input: INPUT ID

   68 estr_cond: IF expr COLON ENDLINE stmt_list END
   69          | IF expr COLON ENDLINE stmt_list cond_else
   70          | IF expr COLON ENDLINE stmt_list cond_elif

   71 cond_elif: ELIF expr COLON ENDLINE stmt_list cond_elif
   72          | ELIF expr COLON ENDLINE stmt_list cond_else

   73 cond_else: ELSE COLON ENDLINE stmt_list END

   74 estr_while: WHILE expr COLON stmt_list END

   75 estr_for: FOR decl_var COMMA var IN var COLON stmt_list END


Terminals, with rules where they appear

$end (0) 0
'-' (45)
error (256)
INT (258) 27 62
REAL (259) 28 61
STR (260) 29
ID (261) 17 18 19 23 24 31 38 42 43 44 45 67
TYPE (262) 38
PRINT (263) 66
INPUT (264) 67
COMMA (265) 33 40 75
COLON (266) 38 42 43 44 45 68 69 70 71 72 73 74 75
SEMICOLON (267)
LPAREN (268) 17 18 42 43 44 45 46
RPAREN (269) 17 18 42 43 44 45 46
LBRACE (270)
RBRACE (271)
LBRACK (272)
RBRACK (273)
DOT (274)
ASSIGN (275) 13
ELIF (276) 71 72
IF (277) 68 69 70
ELSE (278) 73
RETURN (279) 43 44
WHILE (280) 74
FOR (281) 75
SKIP (282)
IN (283) 75
NOT (284) 59
NIL (285) 30
DEF (286) 42 43 44 45
TRUE (287)
FALSE (288)
BREAK (289)
SET (290)
LIST (291)
DIVM (292)
ADDPERC (293)
SUBPERC (294)
ADDEQ (295)
SUBEQ (296)
DIVEQ (297)
MULTEQ (298)
DIVMEQ (299)
DICT (300)
MAIN (301)
END (302) 38 42 43 44 45 68 73 74 75
ENDLINE (303) 12 36 37 38 42 43 44 45 68 69 70 71 72 73
CONTSTMT (304)
DIV (305)
DECINT (306) 20
DECREAL (307) 21
DECSTR (308) 22
PLUS (309) 47
MINUS (310) 48 60
AND (311) 56
OR (312) 57
NEQ (313) 58
EQ (314) 55
LT (315) 51
LE (316) 52
GT (317) 54
GE (318) 53
PERC (319)
TIMES (320) 49
DIVIDE (321) 50


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
prog (69)
    on left: 1, on right: 0
stmt_list (70)
    on left: 2 3, on right: 1 3 42 43 44 45 68 69 70 71 72 73 74 75
stmt (71)
    on left: 4 5 6 7 8 9 10 11, on right: 2 3
end_stmt (72)
    on left: 12, on right: 4 5 6 7 8 9 10 11
assign (73)
    on left: 13, on right: 4
lhs (74)
    on left: 14 15, on right: 13
rhs (75)
    on left: 16, on right: 13
call_func (76)
    on left: 17 18, on right: 63
decl_var (77)
    on left: 19, on right: 6 14 36 37 39 40 75
decl_data_type (78)
    on left: 20 21 22 23, on right: 19
var (79)
    on left: 24, on right: 15 75
data_type (80)
    on left: 25 26, on right: 32 33
prim_type (81)
    on left: 27 28 29 30, on right: 25
abs_type (82)
    on left: 31, on right: 26
data_types (83)
    on left: 32 33, on right: 18 33
definition (84)
    on left: 34 35, on right: 5
decl_field_type (85)
    on left: 36 37, on right: 37 38
type_def (86)
    on left: 38, on right: 34
param_func (87)
    on left: 39 40, on right: 40 44 45
func_def (88)
    on left: 41 42 43 44 45, on right: 35
expr (89)
    on left: 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63,
    on right: 9 16 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 66
    68 69 70 71 72 74
f_builtin (90)
    on left: 64 65, on right: 8
f_print (91)
    on left: 66, on right: 64
f_input (92)
    on left: 67, on right: 65
estr_cond (93)
    on left: 68 69 70, on right: 7
cond_elif (94)
    on left: 71 72, on right: 70 71
cond_else (95)
    on left: 73, on right: 69 72
estr_while (96)
    on left: 74, on right: 10
estr_for (97)
    on left: 75, on right: 11


State 0

    0 $accept: . prog $end

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    $default  reduce using rule 41 (func_def)

    prog            go to state 17
    stmt_list       go to state 18
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 1

   62 expr: INT .

    $default  reduce using rule 62 (expr)


State 2

   61 expr: REAL .

    $default  reduce using rule 61 (expr)


State 3

   17 call_func: ID . LPAREN RPAREN
   18          | ID . LPAREN data_types RPAREN
   23 decl_data_type: ID .
   24 var: ID .

    LPAREN  shift, and go to state 36

    ASSIGN    reduce using rule 24 (var)
    $default  reduce using rule 23 (decl_data_type)


State 4

   38 type_def: TYPE . ID COLON ENDLINE decl_field_type END

    ID  shift, and go to state 37


State 5

   66 f_print: PRINT . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 39


State 6

   67 f_input: INPUT . ID

    ID  shift, and go to state 40


State 7

   46 expr: LPAREN . expr RPAREN

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 41


State 8

   68 estr_cond: IF . expr COLON ENDLINE stmt_list END
   69          | IF . expr COLON ENDLINE stmt_list cond_else
   70          | IF . expr COLON ENDLINE stmt_list cond_elif

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 42


State 9

   74 estr_while: WHILE . expr COLON stmt_list END

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 43


State 10

   75 estr_for: FOR . decl_var COMMA var IN var COLON stmt_list END

    ID       shift, and go to state 44
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15

    decl_var        go to state 45
    decl_data_type  go to state 24


State 11

   59 expr: NOT . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 46


State 12

   42 func_def: DEF . ID LPAREN RPAREN COLON ENDLINE stmt_list END
   43         | DEF . ID LPAREN RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   44         | DEF . ID LPAREN param_func RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   45         | DEF . ID LPAREN param_func RPAREN COLON ENDLINE stmt_list END

    ID  shift, and go to state 47


State 13

   20 decl_data_type: DECINT .

    $default  reduce using rule 20 (decl_data_type)


State 14

   21 decl_data_type: DECREAL .

    $default  reduce using rule 21 (decl_data_type)


State 15

   22 decl_data_type: DECSTR .

    $default  reduce using rule 22 (decl_data_type)


State 16

   60 expr: MINUS . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 48


State 17

    0 $accept: prog . $end

    $end  shift, and go to state 49


State 18

    1 prog: stmt_list .

    $default  reduce using rule 1 (prog)


State 19

    2 stmt_list: stmt .
    3          | stmt . stmt_list

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    ENDLINE   reduce using rule 41 (func_def)
    $default  reduce using rule 2 (stmt_list)

    stmt_list       go to state 50
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 20

    4 stmt: assign . end_stmt

    ENDLINE  shift, and go to state 51

    end_stmt  go to state 52


State 21

   13 assign: lhs . ASSIGN rhs

    ASSIGN  shift, and go to state 53


State 22

   63 expr: call_func .

    $default  reduce using rule 63 (expr)


State 23

    6 stmt: decl_var . end_stmt
   14 lhs: decl_var .

    ENDLINE  shift, and go to state 51

    $default  reduce using rule 14 (lhs)

    end_stmt  go to state 54


State 24

   19 decl_var: decl_data_type . ID

    ID  shift, and go to state 55


State 25

   15 lhs: var .

    $default  reduce using rule 15 (lhs)


State 26

    5 stmt: definition . end_stmt

    ENDLINE  shift, and go to state 51

    end_stmt  go to state 56


State 27

   34 definition: type_def .

    $default  reduce using rule 34 (definition)


State 28

   35 definition: func_def .

    $default  reduce using rule 35 (definition)


State 29

    9 stmt: expr . end_stmt
   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    ENDLINE  shift, and go to state 51
    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    AND      shift, and go to state 59
    OR       shift, and go to state 60
    NEQ      shift, and go to state 61
    EQ       shift, and go to state 62
    LT       shift, and go to state 63
    LE       shift, and go to state 64
    GT       shift, and go to state 65
    GE       shift, and go to state 66
    TIMES    shift, and go to state 67
    DIVIDE   shift, and go to state 68

    end_stmt  go to state 69


State 30

    8 stmt: f_builtin . end_stmt

    ENDLINE  shift, and go to state 51

    end_stmt  go to state 70


State 31

   64 f_builtin: f_print .

    $default  reduce using rule 64 (f_builtin)


State 32

   65 f_builtin: f_input .

    $default  reduce using rule 65 (f_builtin)


State 33

    7 stmt: estr_cond . end_stmt

    ENDLINE  shift, and go to state 51

    end_stmt  go to state 71


State 34

   10 stmt: estr_while . end_stmt

    ENDLINE  shift, and go to state 51

    end_stmt  go to state 72


State 35

   11 stmt: estr_for . end_stmt

    ENDLINE  shift, and go to state 51

    end_stmt  go to state 73


State 36

   17 call_func: ID LPAREN . RPAREN
   18          | ID LPAREN . data_types RPAREN

    INT     shift, and go to state 74
    REAL    shift, and go to state 75
    STR     shift, and go to state 76
    ID      shift, and go to state 77
    RPAREN  shift, and go to state 78
    NIL     shift, and go to state 79

    data_type   go to state 80
    prim_type   go to state 81
    abs_type    go to state 82
    data_types  go to state 83


State 37

   38 type_def: TYPE ID . COLON ENDLINE decl_field_type END

    COLON  shift, and go to state 84


State 38

   17 call_func: ID . LPAREN RPAREN
   18          | ID . LPAREN data_types RPAREN

    LPAREN  shift, and go to state 36


State 39

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr
   66 f_print: PRINT expr .

    PLUS    shift, and go to state 57
    MINUS   shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60
    NEQ     shift, and go to state 61
    EQ      shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 66 (f_print)


State 40

   67 f_input: INPUT ID .

    $default  reduce using rule 67 (f_input)


State 41

   46 expr: LPAREN expr . RPAREN
   47     | expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    RPAREN  shift, and go to state 85
    PLUS    shift, and go to state 57
    MINUS   shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60
    NEQ     shift, and go to state 61
    EQ      shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 42

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr
   68 estr_cond: IF expr . COLON ENDLINE stmt_list END
   69          | IF expr . COLON ENDLINE stmt_list cond_else
   70          | IF expr . COLON ENDLINE stmt_list cond_elif

    COLON   shift, and go to state 86
    PLUS    shift, and go to state 57
    MINUS   shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60
    NEQ     shift, and go to state 61
    EQ      shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 43

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr
   74 estr_while: WHILE expr . COLON stmt_list END

    COLON   shift, and go to state 87
    PLUS    shift, and go to state 57
    MINUS   shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60
    NEQ     shift, and go to state 61
    EQ      shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 44

   23 decl_data_type: ID .

    $default  reduce using rule 23 (decl_data_type)


State 45

   75 estr_for: FOR decl_var . COMMA var IN var COLON stmt_list END

    COMMA  shift, and go to state 88


State 46

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr
   59     | NOT expr .

    $default  reduce using rule 59 (expr)


State 47

   42 func_def: DEF ID . LPAREN RPAREN COLON ENDLINE stmt_list END
   43         | DEF ID . LPAREN RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   44         | DEF ID . LPAREN param_func RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   45         | DEF ID . LPAREN param_func RPAREN COLON ENDLINE stmt_list END

    LPAREN  shift, and go to state 89


State 48

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr
   60     | MINUS expr .

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 60 (expr)


State 49

    0 $accept: prog $end .

    $default  accept


State 50

    3 stmt_list: stmt stmt_list .

    $default  reduce using rule 3 (stmt_list)


State 51

   12 end_stmt: ENDLINE .

    $default  reduce using rule 12 (end_stmt)


State 52

    4 stmt: assign end_stmt .

    $default  reduce using rule 4 (stmt)


State 53

   13 assign: lhs ASSIGN . rhs

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    rhs        go to state 90
    call_func  go to state 22
    expr       go to state 91


State 54

    6 stmt: decl_var end_stmt .

    $default  reduce using rule 6 (stmt)


State 55

   19 decl_var: decl_data_type ID .

    $default  reduce using rule 19 (decl_var)


State 56

    5 stmt: definition end_stmt .

    $default  reduce using rule 5 (stmt)


State 57

   47 expr: expr PLUS . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 92


State 58

   48 expr: expr MINUS . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 93


State 59

   56 expr: expr AND . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 94


State 60

   57 expr: expr OR . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 95


State 61

   58 expr: expr NEQ . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 96


State 62

   55 expr: expr EQ . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 97


State 63

   51 expr: expr LT . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 98


State 64

   52 expr: expr LE . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 99


State 65

   54 expr: expr GT . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 100


State 66

   53 expr: expr GE . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 101


State 67

   49 expr: expr TIMES . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 102


State 68

   50 expr: expr DIVIDE . expr

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 103


State 69

    9 stmt: expr end_stmt .

    $default  reduce using rule 9 (stmt)


State 70

    8 stmt: f_builtin end_stmt .

    $default  reduce using rule 8 (stmt)


State 71

    7 stmt: estr_cond end_stmt .

    $default  reduce using rule 7 (stmt)


State 72

   10 stmt: estr_while end_stmt .

    $default  reduce using rule 10 (stmt)


State 73

   11 stmt: estr_for end_stmt .

    $default  reduce using rule 11 (stmt)


State 74

   27 prim_type: INT .

    $default  reduce using rule 27 (prim_type)


State 75

   28 prim_type: REAL .

    $default  reduce using rule 28 (prim_type)


State 76

   29 prim_type: STR .

    $default  reduce using rule 29 (prim_type)


State 77

   31 abs_type: ID .

    $default  reduce using rule 31 (abs_type)


State 78

   17 call_func: ID LPAREN RPAREN .

    $default  reduce using rule 17 (call_func)


State 79

   30 prim_type: NIL .

    $default  reduce using rule 30 (prim_type)


State 80

   32 data_types: data_type .
   33           | data_type . COMMA data_types

    COMMA  shift, and go to state 104

    $default  reduce using rule 32 (data_types)


State 81

   25 data_type: prim_type .

    $default  reduce using rule 25 (data_type)


State 82

   26 data_type: abs_type .

    $default  reduce using rule 26 (data_type)


State 83

   18 call_func: ID LPAREN data_types . RPAREN

    RPAREN  shift, and go to state 105


State 84

   38 type_def: TYPE ID COLON . ENDLINE decl_field_type END

    ENDLINE  shift, and go to state 106


State 85

   46 expr: LPAREN expr RPAREN .

    $default  reduce using rule 46 (expr)


State 86

   68 estr_cond: IF expr COLON . ENDLINE stmt_list END
   69          | IF expr COLON . ENDLINE stmt_list cond_else
   70          | IF expr COLON . ENDLINE stmt_list cond_elif

    ENDLINE  shift, and go to state 107


State 87

   74 estr_while: WHILE expr COLON . stmt_list END

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    $default  reduce using rule 41 (func_def)

    stmt_list       go to state 108
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 88

   75 estr_for: FOR decl_var COMMA . var IN var COLON stmt_list END

    ID  shift, and go to state 109

    var  go to state 110


State 89

   42 func_def: DEF ID LPAREN . RPAREN COLON ENDLINE stmt_list END
   43         | DEF ID LPAREN . RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   44         | DEF ID LPAREN . param_func RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   45         | DEF ID LPAREN . param_func RPAREN COLON ENDLINE stmt_list END

    ID       shift, and go to state 44
    RPAREN   shift, and go to state 111
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15

    decl_var        go to state 112
    decl_data_type  go to state 24
    param_func      go to state 113


State 90

   13 assign: lhs ASSIGN rhs .

    $default  reduce using rule 13 (assign)


State 91

   16 rhs: expr .
   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    PLUS    shift, and go to state 57
    MINUS   shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60
    NEQ     shift, and go to state 61
    EQ      shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 16 (rhs)


State 92

   47 expr: expr . PLUS expr
   47     | expr PLUS expr .
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 47 (expr)


State 93

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   48     | expr MINUS expr .
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 48 (expr)


State 94

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   56     | expr AND expr .
   57     | expr . OR expr
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 56 (expr)


State 95

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   57     | expr OR expr .
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 57 (expr)


State 96

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr
   58     | expr NEQ expr .

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 58 (expr)


State 97

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   55     | expr EQ expr .
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 55 (expr)


State 98

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   51     | expr LT expr .
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 51 (expr)


State 99

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   52     | expr LE expr .
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 52 (expr)


State 100

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   54     | expr GT expr .
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 54 (expr)


State 101

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   53     | expr GE expr .
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 53 (expr)


State 102

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   49     | expr TIMES expr .
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    $default  reduce using rule 49 (expr)


State 103

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   50     | expr DIVIDE expr .
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr

    $default  reduce using rule 50 (expr)


State 104

   33 data_types: data_type COMMA . data_types

    INT   shift, and go to state 74
    REAL  shift, and go to state 75
    STR   shift, and go to state 76
    ID    shift, and go to state 77
    NIL   shift, and go to state 79

    data_type   go to state 80
    prim_type   go to state 81
    abs_type    go to state 82
    data_types  go to state 114


State 105

   18 call_func: ID LPAREN data_types RPAREN .

    $default  reduce using rule 18 (call_func)


State 106

   38 type_def: TYPE ID COLON ENDLINE . decl_field_type END

    ID       shift, and go to state 44
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15

    decl_var         go to state 115
    decl_data_type   go to state 24
    decl_field_type  go to state 116


State 107

   68 estr_cond: IF expr COLON ENDLINE . stmt_list END
   69          | IF expr COLON ENDLINE . stmt_list cond_else
   70          | IF expr COLON ENDLINE . stmt_list cond_elif

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    $default  reduce using rule 41 (func_def)

    stmt_list       go to state 117
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 108

   74 estr_while: WHILE expr COLON stmt_list . END

    END  shift, and go to state 118


State 109

   24 var: ID .

    $default  reduce using rule 24 (var)


State 110

   75 estr_for: FOR decl_var COMMA var . IN var COLON stmt_list END

    IN  shift, and go to state 119


State 111

   42 func_def: DEF ID LPAREN RPAREN . COLON ENDLINE stmt_list END
   43         | DEF ID LPAREN RPAREN . COLON ENDLINE stmt_list RETURN ID ENDLINE END

    COLON  shift, and go to state 120


State 112

   39 param_func: decl_var .
   40           | decl_var . COMMA param_func

    COMMA  shift, and go to state 121

    $default  reduce using rule 39 (param_func)


State 113

   44 func_def: DEF ID LPAREN param_func . RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END
   45         | DEF ID LPAREN param_func . RPAREN COLON ENDLINE stmt_list END

    RPAREN  shift, and go to state 122


State 114

   33 data_types: data_type COMMA data_types .

    $default  reduce using rule 33 (data_types)


State 115

   36 decl_field_type: decl_var . ENDLINE
   37                | decl_var . ENDLINE decl_field_type

    ENDLINE  shift, and go to state 123


State 116

   38 type_def: TYPE ID COLON ENDLINE decl_field_type . END

    END  shift, and go to state 124


State 117

   68 estr_cond: IF expr COLON ENDLINE stmt_list . END
   69          | IF expr COLON ENDLINE stmt_list . cond_else
   70          | IF expr COLON ENDLINE stmt_list . cond_elif

    ELIF  shift, and go to state 125
    ELSE  shift, and go to state 126
    END   shift, and go to state 127

    cond_elif  go to state 128
    cond_else  go to state 129


State 118

   74 estr_while: WHILE expr COLON stmt_list END .

    $default  reduce using rule 74 (estr_while)


State 119

   75 estr_for: FOR decl_var COMMA var IN . var COLON stmt_list END

    ID  shift, and go to state 109

    var  go to state 130


State 120

   42 func_def: DEF ID LPAREN RPAREN COLON . ENDLINE stmt_list END
   43         | DEF ID LPAREN RPAREN COLON . ENDLINE stmt_list RETURN ID ENDLINE END

    ENDLINE  shift, and go to state 131


State 121

   40 param_func: decl_var COMMA . param_func

    ID       shift, and go to state 44
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15

    decl_var        go to state 112
    decl_data_type  go to state 24
    param_func      go to state 132


State 122

   44 func_def: DEF ID LPAREN param_func RPAREN . COLON ENDLINE stmt_list RETURN ID ENDLINE END
   45         | DEF ID LPAREN param_func RPAREN . COLON ENDLINE stmt_list END

    COLON  shift, and go to state 133


State 123

   36 decl_field_type: decl_var ENDLINE .
   37                | decl_var ENDLINE . decl_field_type

    ID       shift, and go to state 44
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15

    $default  reduce using rule 36 (decl_field_type)

    decl_var         go to state 115
    decl_data_type   go to state 24
    decl_field_type  go to state 134


State 124

   38 type_def: TYPE ID COLON ENDLINE decl_field_type END .

    $default  reduce using rule 38 (type_def)


State 125

   71 cond_elif: ELIF . expr COLON ENDLINE stmt_list cond_elif
   72          | ELIF . expr COLON ENDLINE stmt_list cond_else

    INT     shift, and go to state 1
    REAL    shift, and go to state 2
    ID      shift, and go to state 38
    LPAREN  shift, and go to state 7
    NOT     shift, and go to state 11
    MINUS   shift, and go to state 16

    call_func  go to state 22
    expr       go to state 135


State 126

   73 cond_else: ELSE . COLON ENDLINE stmt_list END

    COLON  shift, and go to state 136


State 127

   68 estr_cond: IF expr COLON ENDLINE stmt_list END .

    $default  reduce using rule 68 (estr_cond)


State 128

   70 estr_cond: IF expr COLON ENDLINE stmt_list cond_elif .

    $default  reduce using rule 70 (estr_cond)


State 129

   69 estr_cond: IF expr COLON ENDLINE stmt_list cond_else .

    $default  reduce using rule 69 (estr_cond)


State 130

   75 estr_for: FOR decl_var COMMA var IN var . COLON stmt_list END

    COLON  shift, and go to state 137


State 131

   42 func_def: DEF ID LPAREN RPAREN COLON ENDLINE . stmt_list END
   43         | DEF ID LPAREN RPAREN COLON ENDLINE . stmt_list RETURN ID ENDLINE END

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    $default  reduce using rule 41 (func_def)

    stmt_list       go to state 138
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 132

   40 param_func: decl_var COMMA param_func .

    $default  reduce using rule 40 (param_func)


State 133

   44 func_def: DEF ID LPAREN param_func RPAREN COLON . ENDLINE stmt_list RETURN ID ENDLINE END
   45         | DEF ID LPAREN param_func RPAREN COLON . ENDLINE stmt_list END

    ENDLINE  shift, and go to state 139


State 134

   37 decl_field_type: decl_var ENDLINE decl_field_type .

    $default  reduce using rule 37 (decl_field_type)


State 135

   47 expr: expr . PLUS expr
   48     | expr . MINUS expr
   49     | expr . TIMES expr
   50     | expr . DIVIDE expr
   51     | expr . LT expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . GT expr
   55     | expr . EQ expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | expr . NEQ expr
   71 cond_elif: ELIF expr . COLON ENDLINE stmt_list cond_elif
   72          | ELIF expr . COLON ENDLINE stmt_list cond_else

    COLON   shift, and go to state 140
    PLUS    shift, and go to state 57
    MINUS   shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60
    NEQ     shift, and go to state 61
    EQ      shift, and go to state 62
    LT      shift, and go to state 63
    LE      shift, and go to state 64
    GT      shift, and go to state 65
    GE      shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 136

   73 cond_else: ELSE COLON . ENDLINE stmt_list END

    ENDLINE  shift, and go to state 141


State 137

   75 estr_for: FOR decl_var COMMA var IN var COLON . stmt_list END

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    $default  reduce using rule 41 (func_def)

    stmt_list       go to state 142
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 138

   42 func_def: DEF ID LPAREN RPAREN COLON ENDLINE stmt_list . END
   43         | DEF ID LPAREN RPAREN COLON ENDLINE stmt_list . RETURN ID ENDLINE END

    RETURN  shift, and go to state 143
    END     shift, and go to state 144


State 139

   44 func_def: DEF ID LPAREN param_func RPAREN COLON ENDLINE . stmt_list RETURN ID ENDLINE END
   45         | DEF ID LPAREN param_func RPAREN COLON ENDLINE . stmt_list END

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    $default  reduce using rule 41 (func_def)

    stmt_list       go to state 145
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 140

   71 cond_elif: ELIF expr COLON . ENDLINE stmt_list cond_elif
   72          | ELIF expr COLON . ENDLINE stmt_list cond_else

    ENDLINE  shift, and go to state 146


State 141

   73 cond_else: ELSE COLON ENDLINE . stmt_list END

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    $default  reduce using rule 41 (func_def)

    stmt_list       go to state 147
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 142

   75 estr_for: FOR decl_var COMMA var IN var COLON stmt_list . END

    END  shift, and go to state 148


State 143

   43 func_def: DEF ID LPAREN RPAREN COLON ENDLINE stmt_list RETURN . ID ENDLINE END

    ID  shift, and go to state 149


State 144

   42 func_def: DEF ID LPAREN RPAREN COLON ENDLINE stmt_list END .

    $default  reduce using rule 42 (func_def)


State 145

   44 func_def: DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list . RETURN ID ENDLINE END
   45         | DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list . END

    RETURN  shift, and go to state 150
    END     shift, and go to state 151


State 146

   71 cond_elif: ELIF expr COLON ENDLINE . stmt_list cond_elif
   72          | ELIF expr COLON ENDLINE . stmt_list cond_else

    INT      shift, and go to state 1
    REAL     shift, and go to state 2
    ID       shift, and go to state 3
    TYPE     shift, and go to state 4
    PRINT    shift, and go to state 5
    INPUT    shift, and go to state 6
    LPAREN   shift, and go to state 7
    IF       shift, and go to state 8
    WHILE    shift, and go to state 9
    FOR      shift, and go to state 10
    NOT      shift, and go to state 11
    DEF      shift, and go to state 12
    DECINT   shift, and go to state 13
    DECREAL  shift, and go to state 14
    DECSTR   shift, and go to state 15
    MINUS    shift, and go to state 16

    $default  reduce using rule 41 (func_def)

    stmt_list       go to state 152
    stmt            go to state 19
    assign          go to state 20
    lhs             go to state 21
    call_func       go to state 22
    decl_var        go to state 23
    decl_data_type  go to state 24
    var             go to state 25
    definition      go to state 26
    type_def        go to state 27
    func_def        go to state 28
    expr            go to state 29
    f_builtin       go to state 30
    f_print         go to state 31
    f_input         go to state 32
    estr_cond       go to state 33
    estr_while      go to state 34
    estr_for        go to state 35


State 147

   73 cond_else: ELSE COLON ENDLINE stmt_list . END

    END  shift, and go to state 153


State 148

   75 estr_for: FOR decl_var COMMA var IN var COLON stmt_list END .

    $default  reduce using rule 75 (estr_for)


State 149

   43 func_def: DEF ID LPAREN RPAREN COLON ENDLINE stmt_list RETURN ID . ENDLINE END

    ENDLINE  shift, and go to state 154


State 150

   44 func_def: DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list RETURN . ID ENDLINE END

    ID  shift, and go to state 155


State 151

   45 func_def: DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list END .

    $default  reduce using rule 45 (func_def)


State 152

   71 cond_elif: ELIF expr COLON ENDLINE stmt_list . cond_elif
   72          | ELIF expr COLON ENDLINE stmt_list . cond_else

    ELIF  shift, and go to state 125
    ELSE  shift, and go to state 126

    cond_elif  go to state 156
    cond_else  go to state 157


State 153

   73 cond_else: ELSE COLON ENDLINE stmt_list END .

    $default  reduce using rule 73 (cond_else)


State 154

   43 func_def: DEF ID LPAREN RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE . END

    END  shift, and go to state 158


State 155

   44 func_def: DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list RETURN ID . ENDLINE END

    ENDLINE  shift, and go to state 159


State 156

   71 cond_elif: ELIF expr COLON ENDLINE stmt_list cond_elif .

    $default  reduce using rule 71 (cond_elif)


State 157

   72 cond_elif: ELIF expr COLON ENDLINE stmt_list cond_else .

    $default  reduce using rule 72 (cond_elif)


State 158

   43 func_def: DEF ID LPAREN RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END .

    $default  reduce using rule 43 (func_def)


State 159

   44 func_def: DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE . END

    END  shift, and go to state 160


State 160

   44 func_def: DEF ID LPAREN param_func RPAREN COLON ENDLINE stmt_list RETURN ID ENDLINE END .

    $default  reduce using rule 44 (func_def)
